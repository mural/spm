package com.spm.common.http;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.AbstractHttpMessage;
import org.apache.http.message.BasicNameValuePair;
import android.util.Log;
import com.google.inject.internal.Lists;
import com.spm.common.cookie.CookieRepository;
import com.spm.common.cookie.CookieRepositoryImpl;
import com.spm.common.exception.CommonErrorCode;
import com.spm.common.exception.UnexpectedException;
import com.spm.common.http.webservice.WebService;
import com.spm.common.parser.WebServiceParser;

/**
 * @author Luciano Rey
 */
public abstract class HttpWebService implements WebService {
	
	private static final String TAG = HttpWebService.class.getSimpleName();
	
	private static final String HEADER_STATUS_CODE = "X-Ba-Statuscode";
	private static final String HEADER_STATUS_MESSAGE = "X-Ba-Statusmessage";
	
	private static final String SUCCESSFULL_STATUS_CODE = "200";
	private static final int MIN_HTTP_SUCCESSFULL_CODE = 200;
	private static final int MAX_HTTP_SUCCESSFULL_CODE = 299;
	
	/** Connection timeout in milliseconds */
	private Integer connectionTimeout;
	
	/** Parameter values of the request. */
	private List<NameValuePair> parameters = Lists.newArrayList();
	
	/** Base URL of the request to execute */
	private String baseURL;
	
	/** Header values of the request. */
	private List<NameValuePair> headers = Lists.newArrayList();
	
	/** The repository to handle the http client's cookies */
	private CookieRepository cookieRepository = CookieRepositoryImpl.getInstance();
	
	/**
	 * @param baseURL The Base URL of the request to execute
	 */
	public HttpWebService(String baseURL) {
		this.baseURL = baseURL;
	}
	
	/**
	 * @see com.spm.common.http.webservice.WebService#execute()
	 */
	@SuppressWarnings("unchecked")
	@Override
	public final <T> T execute() {
		return (T)execute(null);
	}
	
	/**
	 * @see com.spm.common.http.webservice.WebService#execute(com.spm.common.parser.WebServiceParser)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public <T> T execute(WebServiceParser parser) {
		DefaultHttpClient client = null;
		try {
			// make client for http.
			client = HttpClientFactory.createDefaultHttpClient(connectionTimeout);
			
			if (saveCookies()) {
				// Add all the cookies to the http client
				for (Cookie cookie : cookieRepository.getAll()) {
					client.getCookieStore().addCookie(cookie);
				}
			}
			
			// make request.
			HttpUriRequest request = this.makeHttpUriRequest();
			
			// log info.
			Log.d(TAG, "Request: " + request.getRequestLine().getUri());
			
			// execute request.
			final HttpResponse httpResponse = client.execute(request);
			
			if (saveCookies()) {
				// Save all returned cookies into the repository.
				cookieRepository.saveAll(client.getCookieStore().getCookies());
			}
			
			// validate response.
			this.validateResponse(httpResponse);
			
			// validate headers
			validateHeaders(httpResponse);
			
			// obtain input stream.
			final HttpEntity entity = httpResponse.getEntity();
			
			// parse and return response.
			return (T)((parser != null) && (entity != null) ? parser.parse(entity.getContent()) : null);
		} catch (URISyntaxException e) {
			throw new UnexpectedException(e);
		} catch (ClientProtocolException e) {
			throw new UnexpectedException(e);
		} catch (IOException e) {
			throw CommonErrorCode.CONNECTION_ERROR.newApplicationException(e);
		} finally {
			if (client != null) {
				client.getConnectionManager().shutdown();
			}
		}
	}
	
	/**
	 * @see com.spm.common.http.webservice.WebService#addHeader(java.lang.String, java.lang.String)
	 */
	@Override
	public void addHeader(String name, String value) {
		headers.add(new BasicNameValuePair(name, value));
	}
	
	/**
	 * Validate the response generated by the server.
	 * 
	 * @param httpResponse
	 */
	protected void validateResponse(HttpResponse httpResponse) {
		int code = httpResponse.getStatusLine().getStatusCode();
		if ((code < MIN_HTTP_SUCCESSFULL_CODE) || (code > MAX_HTTP_SUCCESSFULL_CODE)) {
			String errorMessage = "HTTP Error code: " + code + " Reason: "
					+ httpResponse.getStatusLine().getReasonPhrase();
			Log.w(TAG, errorMessage);
			throw CommonErrorCode.SERVER_ERROR.newApplicationException(errorMessage);
		} else {
			Log.d(TAG, "HTTP Status code: " + code);
		}
	}
	
	protected void validateHeaders(HttpResponse httpResponse) {
		// Header[] headerstatusCode = httpResponse.getHeaders(HEADER_STATUS_CODE);
		// if (headerstatusCode.length == 0) {
		// throw CommonErrorCode.SERVER_ERROR.newApplicationException("Missing " + HEADER_STATUS_CODE + " header.");
		// } else {
		// Header statusCode = headerstatusCode[0];
		// if (!statusCode.getValue().equals(SUCCESSFULL_STATUS_CODE)) {
		// Header headerStatusMessage = httpResponse.getHeaders(HEADER_STATUS_MESSAGE)[0];
		// Log.w(TAG,
		// "Server Status code: " + statusCode.getValue() + " Message: " + headerStatusMessage.getValue());
		// throw new ServerBusinessException(headerStatusMessage.getValue());
		// }
		// }
	}
	
	protected void addParameter(NameValuePair parameter) {
		parameters.add(parameter);
	}
	
	protected void addHeaders(AbstractHttpMessage abstractHttpMessage) {
		for (NameValuePair pair : headers) {
			abstractHttpMessage.addHeader(pair.getName(), pair.getValue());
		}
	}
	
	/**
	 * @return the baseURL
	 */
	public String getBaseURL() {
		return baseURL;
	}
	
	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return getClass().getSimpleName() + " - " + baseURL;
	}
	
	/**
	 * @return the parameters
	 */
	protected List<NameValuePair> getParameters() {
		return parameters;
	}
	
	/**
	 * @see com.spm.common.http.webservice.WebService#setConnectionTimeout(java.lang.Integer)
	 */
	@Override
	public void setConnectionTimeout(Integer connectionTimeout) {
		this.connectionTimeout = connectionTimeout;
	}
	
	/**
	 * Create the {@link HttpUriRequest} to send. It can be a GET or a POST.
	 */
	protected abstract HttpUriRequest makeHttpUriRequest() throws URISyntaxException, UnsupportedEncodingException;
	
	protected Boolean saveCookies() {
		return false;
	}
	
}
